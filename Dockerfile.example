FROM base-image


##############################################################################
# From docker-library/buildpack-deps/vivid/curl/Dockerfile
RUN apt-get update && apt-get install -y --no-install-recommends \
		ca-certificates \
		curl \
		wget \
	&& rm -rf /var/lib/apt/lists/*


##############################################################################
# From docker-library/buildpack-deps/vivid/scm/Dockerfile
RUN apt-get update && apt-get install -y --no-install-recommends \
		bzr \
		git \
		mercurial \
		openssh-client \
		subversion \
	&& rm -rf /var/lib/apt/lists/*


##############################################################################
# From docker-library/buildpack-deps/vivid/Dockerfile
RUN apt-get update && apt-get update && apt-get install -y --no-install-recommends \
		autoconf \
		automake \
		bzip2 \
		file \
		g++ \
		gcc \
		imagemagick \
		libbz2-dev \
		libc6-dev \
		libcurl4-openssl-dev \
		libevent-dev \
		libffi-dev \
		libglib2.0-dev \
		libjpeg-dev \
		liblzma-dev \
		libmagickcore-dev \
		libmagickwand-dev \
		libmysqlclient-dev \
		libncurses-dev \
		libpq-dev \
		libreadline-dev \
		libsqlite3-dev \
		libssl-dev \
		libtool \
		libwebp-dev \
		libxml2-dev \
		libxslt-dev \
		libyaml-dev \
		make \
		patch \
		xz-utils \
		zlib1g-dev \
	&& rm -rf /var/lib/apt/lists/*


##############################################################################
# Define the number of processors to use during the compiling steps
ENV NPROCS 2

##############################################################################
##############################################################################
# From docker-library/gcc/5.1/Dockerfile
# Modified to use NPROCS

# https://gcc.gnu.org/mirrors.html
ENV GPG_KEYS \
	B215C1633BCA0477615F1B35A5B3A004745C015A \
	B3C42148A44E6983B3E4CC0793FA9B1AB75C61B8 \
	90AA470469D3965A87A5DCB494D03953902C9419 \
	80F98B2E0DAB6C8281BDF541A7C8C3B2F71EDF1C \
	7F74F97C103468EE5D750B583AB00996FC26A641 \
	33C235A34C46AA3FFB293709A328C3A2C3C45C06
RUN set -xe \
	&& for key in $GPG_KEYS; do \
		gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
	done

# Last Modified: 2015-04-22
ENV GCC_VERSION 5.1.0
# Docker EOL: 2017-04-22

# "download_prerequisites" pulls down a bunch of tarballs and extracts them,
# but then leaves the tarballs themselves lying around
RUN buildDeps='flex' \
	&& set -x \
	&& apt-get update && apt-get install -y $buildDeps --no-install-recommends \
	&& rm -r /var/lib/apt/lists/* \
	&& curl -SL "http://ftpmirror.gnu.org/gcc/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.bz2" -o gcc.tar.bz2 \
	&& curl -SL "http://ftpmirror.gnu.org/gcc/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.bz2.sig" -o gcc.tar.bz2.sig \
	&& gpg --verify gcc.tar.bz2.sig \
	&& mkdir -p /usr/src/gcc \
	&& tar -xvf gcc.tar.bz2 -C /usr/src/gcc --strip-components=1 \
	&& rm gcc.tar.bz2* \
	&& cd /usr/src/gcc \
	&& ./contrib/download_prerequisites \
	&& { rm *.tar.* || true; } \
	&& dir="$(mktemp -d)" \
	&& cd "$dir" \
	&& /usr/src/gcc/configure \
		--disable-multilib \
		--enable-languages=c,c++ \
	&& make -j"$(NPROCS)" \
	&& make install-strip \
	&& cd .. \
	&& rm -rf "$dir" \
	&& apt-get purge -y --auto-remove $buildDeps

# gcc installs .so files in /usr/local/lib64...
RUN echo '/usr/local/lib64' > /etc/ld.so.conf.d/local-lib64.conf \
	&& ldconfig -v

# ensure that alternatives are pointing to the new compiler and that old one is no longer used
RUN set -x \
	&& dpkg-divert --divert /usr/bin/gcc.orig --rename /usr/bin/gcc \
	&& dpkg-divert --divert /usr/bin/g++.orig --rename /usr/bin/g++ \
	&& update-alternatives --install /usr/bin/cc cc /usr/local/bin/gcc 999


##############################################################################
##############################################################################
# From docker-library/python/2.7/Dockerfile
# Modified to use NPROCS

# remove several traces of debian python
RUN apt-get purge -y python.*

# http://bugs.python.org/issue19846
# > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK.
ENV LANG C.UTF-8

# gpg: key 18ADD4FF: public key "Benjamin Peterson <benjamin@python.org>" imported
RUN gpg --keyserver ha.pool.sks-keyservers.net --recv-keys C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF

ENV PYTHON_VERSION 2.7.10

# if this is called "PIP_VERSION", pip explodes with "ValueError: invalid truth value '<VERSION>'"
ENV PYTHON_PIP_VERSION 7.1.0

RUN set -x \
	&& buildDeps=' \
		curl \
		gcc \
		libbz2-dev \
		libc6-dev \
		libncurses-dev \
		libreadline-dev \
		libsqlite3-dev \
		libssl-dev \
		make \
		xz-utils \
		zlib1g-dev \
	' \
	&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \
	&& mkdir -p /usr/src/python \
	&& curl -SL "https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz" -o python.tar.xz \
	&& curl -SL "https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz.asc" -o python.tar.xz.asc \
	&& gpg --verify python.tar.xz.asc \
	&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \
	&& rm python.tar.xz* \
	&& cd /usr/src/python \
	&& ./configure --enable-shared --enable-unicode=ucs4 \
	&& make -j"$(NPROCS)" \
	&& make install \
	&& ldconfig \
	&& curl -SL 'https://bootstrap.pypa.io/get-pip.py' | python2 \
	&& pip install --no-cache-dir --upgrade pip==$PYTHON_PIP_VERSION \
	&& find /usr/local \
		\( -type d -a -name test -o -name tests \) \
		-o \( -type f -a -name '*.pyc' -o -name '*.pyo' \) \
		-exec rm -rf '{}' + \
	&& apt-get purge -y --auto-remove $buildDeps \
	&& rm -rf /usr/src/python

# install "virtualenv", since the vast majority of users of this image will want it
RUN pip install --no-cache-dir virtualenv


##############################################################################

## install gcc
#RUN apt-get update
#RUN apt-get install -y apt-utils
#RUN apt-get install -y build-essential
#RUN apt-get install -y vim

# ---------------------------------------------------------------------------
# install our COTS packages
# ---------------------------------------------------------------------------

## Install jpeg
#COPY ./jpeg-6b /usr/src/jpeg
#WORKDIR /usr/src/jpeg
#RUN mkdir -p /usr/src/cots/jpeg/bin/cjpeg
#RUN mkdir -p /usr/src/cots/jpeg/man/man1
#RUN mkdir -p /usr/src/cots/jpeg/include
#RUN mkdir -p /usr/src/cots/jpeg/lib
#RUN ./configure --prefix=/usr/src/cots/jpeg
#RUN make
#RUN make install
#RUN make install-lib
#RUN make install-headers

## Install zlib
#COPY ./zlib-1.2.7 /usr/src/zlib
#WORKDIR /usr/src/zlib
#RUN ./configure --prefix=/usr/src/cots/zlib
#RUN make
#RUN make install

## Install tiff
#COPY ./tiff-3.8.2 /usr/src/tiff
#WORKDIR /usr/src/tiff
#RUN ./configure --prefix=/usr/src/cots/tiff --with-jpeg-include-dir=/usr/src/cots/jpeg/include --with-jpeg-lib-dir=/usr/src/cots/jpeg/lib --with-zlib-include-dir=/usr/src/cots/zlib/include --with-zlib-lib-dir=/usr/src/cots/zlib/lib
#RUN make
#RUN make install

## Install proj4
#COPY ./proj.4.git /usr/src/proj4
#WORKDIR /usr/src/proj4
#RUN ./configure --prefix=/usr/src/cots/proj4
#RUN make
#RUN make install
#
## Install geotiff
#COPY ./libgeotiff-1.4.0 /usr/src/geotiff
#WORKDIR /usr/src/geotiff
#RUN ./configure --prefix=/usr/src/cots/geotiff --with-libtiff=/usr/src/cots/tiff --with-proj=/usr/src/cots/proj4
#RUN make
#RUN make install

